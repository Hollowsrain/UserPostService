apiVersion: v1
kind: Namespace
metadata:
  name: k8s-program
---
#############User database persistentVolume configuration
apiVersion: v1
kind: PersistentVolume
metadata:
  name: user-db-pv-volume
  namespace: k8s-program
  labels:
    type: local
    app: user-db
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /mnt/data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: user-db-volume-claim
  namespace: k8s-program
  labels:
    app: user-db
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
#############Post database persistentVolume configuration
apiVersion: v1
kind: PersistentVolume
metadata:
  name: post-db-pv-volume
  namespace: k8s-program
  labels:
    type: local
    app: post-db
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /mnt/data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: post-db-volume-claim
  namespace: k8s-program
  labels:
    app: post-db
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
#############User database configuration
apiVersion: v1
kind: Service
metadata:
  name: user-db
  namespace: k8s-program
spec:
  selector:
    app: user-db
  ports:
  - name: http
    port: 5432
    targetPort: 5432
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-db
  namespace: k8s-program
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-db
  template:
    metadata:
      labels:
        app: user-db
    spec:
      containers:
      - name: user-db
        image: postgres
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: POSTGRES_USER_DB_USERNAME
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: POSTGRES_USER_DB_PASSWORD
        - name: POSTGRES_DB
          value: userdb
        ports:
        - containerPort: 5432
        volumeMounts:
        - mountPath: /PostgreSQL/15/data
          name: user-db-data
        - mountPath: /docker-entrypoint-initdb.d
          name: user-initdb
      volumes:
      - name: user-db-data
        persistentVolumeClaim:
          claimName: user-db-volume-claim
      - name: user-initdb
        configMap:
          name: user-db-init.sq
---
#############Post database configuration
apiVersion: v1
kind: Service
metadata:
  name: post-db
  namespace: k8s-program
spec:
  selector:
    app: post-db
  ports:
  - name: http
    port: 5033
    targetPort: 5033
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: post-db
  namespace: k8s-program
spec:
  replicas: 1
  selector:
    matchLabels:
      app: post-db
  template:
    metadata:
      labels:
        app: post-db
    spec:
      containers:
      - name: post-db
        image: postgres
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: POSTGRES_POST_DB_USERNAME
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: POSTGRES_POST_DB_PASSWORD
        - name: POSTGRES_DB
          value: postdb
        ports:
        - containerPort: 5033
        volumeMounts:
        - mountPath: /PostgreSQL/15/data
          name: post-db-data
        - mountPath: /docker-entrypoint-initdb.d
          name: post-initdb
      volumes:
      - name: post-db-data
        persistentVolumeClaim:
          claimName: post-db-volume-claim
      - name: post-initdb
        configMap:
          name: post-db-init.sql
---
#############User service configuration
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: k8s-program
spec:
  selector:
    app: user-service
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: hollowsrain/user-service
        ports:
        - containerPort: 8080
---
#############Post service configuration
apiVersion: v1
kind: Service
metadata:
  name: post-service
  namespace: k8s-program
spec:
  selector:
    app: post-service
  ports:
  - name: http
    port: 8081
    targetPort: 8081
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: post-service-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: post-service
  template:
    metadata:
      labels:
        app: post-service
    spec:
      containers:
      - name: post-service
        image: hollowsrain/post-service
        ports:
        - containerPort: 8081
---
#############Secrets configuration
apiVersion: v1
kind: Secret
metadata:
  name: db-secrets
  namespace: k8s-program
type: Opaque
data:
  POSTGRES_USER_DB_USERNAME: user
  POSTGRES_USER_DB_PASSWORD: password
  POSTGRES_POST_DB_USERNAME: post
  POSTGRES_POST_DB_PASSWORD: password
---
#############Config Maps configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-env-vars
  namespace: k8s-program
data:
  POSTGRES_USER_DB: userdb
  POSTGRES_POST_DB: postdb
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-sql-scripts
  namespace: k8s-program
data:
  user-db-init.sql: |-
    CREATE TABLE users (
      id SERIAL PRIMARY KEY,
      username VARCHAR(255) NOT NULL,
      amount_of_posts bigint NOT NULL
    );
  post-db-init.sql: |-
    CREATE TABLE posts (
      id SERIAL PRIMARY KEY,
      posted_at timestamp(6) without time zone NOT NULL,
      text TEXT NOT NULL,
      author_id INTEGER NOT NULL REFERENCES users(id)
    );
---
